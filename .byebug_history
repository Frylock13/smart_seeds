exit
assert_includes categories_ids, entity.category_id
entity.category_id
entity
categories_ids
exit
model.defined_enums.include?('status')
model.defined_enums
column.name
column
cikumn
coluimnb
ex
next
column.name
column
exit
column.name
exit
column.name
column
column.type
column
exit
Entity.columns.find { |obj| obj.type == :integer }.take
Entity.columns.find { |obj| obj.type == :integer }.first
Entity.columns.find { |obj| obj.type == :integer }
Entity.columns.first.name
Entity.columns.first
Entity.columns.detect { |obj|  }
Entity.columns.detect { |obj| obj.name == 'integer' }
Entity.columns.detect { |obj| obj.name == 'integer'   }
Entity.columns[0]
Entity.columns.instance_variable_get("@#{integer}")
Entity.columns.instance_variable_get("@#{name}")
Entity.columns[0]
Entity.columns.boolean
Entity.columns
Entity.columns.find(:boolean)
Entity.columns.find(':boolean')
Entity.columns.find
Entity.columns
Entity.model
generate_value
column
model
exit
column.type
klass.new(column, model).generate_value
klass = "SmartSeeds::Generator::#{column.type.to_s.capitalize}".constantize
column.type
column
model
exit
column.name
column.type
column
exit
model.defined_enums
model.enums_defined
model
column.table_name
column.model
column.table
column.class
column.type
column.name
column
klass = "SmartSeeds::Generator::#{column_type.to_s.capitalize}".constantize
exit
klass.class
klass
Smart::Seeds.const_get(klass)
Object.const_get(klass)
Class.const_get(klass)
klass = "SmartSeeds::Generator::#{column_type.to_s.capitalize}".constantize
column_type
exit
column_type
exit
column_type
next
column_type
next
column_type
next
column_type
next
column_type
next
SmartSeeds::Generator.const_get(klass)
SmartSeeds.const_get(klass)
SmartSeeds.const_get(lkass)
Class.const_get(klass)
klass = "SmartSeeds::Generator::#{column_type.to_s.capitalize}".constantize
klass = "SmartSeeds::Generator::#{column_type.to_s.capitalize}"
column_type
